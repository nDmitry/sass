// Background gradient fallback
@mixin gradient-fallback($gradient, $fallback) {
  background: $fallback;
  background: $gradient;
}

// Arrow-box: a box with an arrow mixin (with optional borders)
//
// @param size: px, em
// @param direction: top, bottom, left, right
// @param bg-color: hex, rgb
// @param border-width: px, em
// @param border-color: hex, rgb
// @param position: px, em, %

@mixin arrow-box($size: 20px, $direction: top, $bg-color: white, $border-width: false, $border-color: black, $position: 50%) {

  // Set reverse direction for use in borders and positions properties
  $reversed-direction: bottom;

  // Set direction of alignment: `left` for vertical direction of arrow (to top, to bottom)
  // and `top` for horizontal direction of arrow (to left, to right)
  $alignment: left;

  @if $direction == bottom {
    $reversed-direction: top;
  } @else if $direction == left {
    $reversed-direction: right;
    $alignment: top;
  } @else if $direction == right {
    $reversed-direction: left;
    $alignment: top;
  }

  position: relative;
  background-color: $bg-color;

  &%common-arrow-style {
    position: absolute;
    #{$reversed-direction}: 100%;
    #{$alignment}: $position;
    height: 0;
    width: 0;
    content: ' ';
    pointer-events: none;
    border-style: solid;
    border-color: transparent;
  }

  &:after {
    @extend %common-arrow-style;
    margin-#{$alignment}: -$size;
    border-#{$reversed-direction}-color: $bg-color;
    border-width: $size;
  }

  // with a border
  @if $border-width {

    border: $border-width solid $border-color;

    @if unit($border-width) == px and $border-width > 1 {
      $border-width: $border-width + 1;
    } @else if unit($border-width) == em and $border-width > .1 {
      $border-width: $border-width * 1.5;
    }

    &:before {
      @extend %common-arrow-style;
      margin-#{$alignment}: -$size - $border-width;
      border-#{$reversed-direction}-color: $border-color;
      border-width: $size + $border-width;
    }
  }

}

// Set color for placeholder
@mixin placeholder-color($color) {
  &::-webkit-input-placeholder {
    color: $color;
  }
  &:-moz-placeholder { // Firefox 18-
    color: $color;
  }
  &::-moz-placeholder { // Firefox 19+
    opacity: 1; // fix the opacity (0.54 by default)
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
}

// Customize selection appearance
@mixin selection {
  &::-moz-selection {
    @content;
  }
  &::selection {
    @content;
  }
}

// Sprites. Usage:
//
// Set this for all elements: background: $icons;
// Then, for each element: `@include sized-sprite($icons, name);` (where `name` is filename) converts to:
//
// .parent {
//    background: url('/img/icons.png?12345678') no-repeat;
// }
// .child {
//    width: 24px;
//    height: 24px;
//    background-position: 0 -24px;
// }

@mixin image-size($path) {
  width: image-width($path);
  height: image-height($path);
}

@mixin sized-sprite($map, $sprite) {
  @include image-size(sprite-file($map, $sprite));
  background-position: sprite-position($map, $sprite);
}
